// Generated by gencpp from file nuscenes2bag/RadarObject.msg
// DO NOT EDIT!


#ifndef NUSCENES2BAG_MESSAGE_RADAROBJECT_H
#define NUSCENES2BAG_MESSAGE_RADAROBJECT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Vector3.h>

namespace nuscenes2bag
{
template <class ContainerAllocator>
struct RadarObject_
{
  typedef RadarObject_<ContainerAllocator> Type;

  RadarObject_()
    : pose()
    , dyn_prop(0)
    , id(0)
    , rcs(0.0)
    , vx(0.0)
    , vy(0.0)
    , vx_comp(0.0)
    , vy_comp(0.0)
    , is_quality_valid(0)
    , ambig_state(0)
    , x_rms(0)
    , y_rms(0)
    , invalid_state(0)
    , pdh0(0)
    , vx_rms(0)
    , vy_rms(0)  {
    }
  RadarObject_(const ContainerAllocator& _alloc)
    : pose(_alloc)
    , dyn_prop(0)
    , id(0)
    , rcs(0.0)
    , vx(0.0)
    , vy(0.0)
    , vx_comp(0.0)
    , vy_comp(0.0)
    , is_quality_valid(0)
    , ambig_state(0)
    , x_rms(0)
    , y_rms(0)
    , invalid_state(0)
    , pdh0(0)
    , vx_rms(0)
    , vy_rms(0)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _pose_type;
  _pose_type pose;

   typedef uint8_t _dyn_prop_type;
  _dyn_prop_type dyn_prop;

   typedef uint16_t _id_type;
  _id_type id;

   typedef float _rcs_type;
  _rcs_type rcs;

   typedef float _vx_type;
  _vx_type vx;

   typedef float _vy_type;
  _vy_type vy;

   typedef float _vx_comp_type;
  _vx_comp_type vx_comp;

   typedef float _vy_comp_type;
  _vy_comp_type vy_comp;

   typedef uint8_t _is_quality_valid_type;
  _is_quality_valid_type is_quality_valid;

   typedef uint8_t _ambig_state_type;
  _ambig_state_type ambig_state;

   typedef uint8_t _x_rms_type;
  _x_rms_type x_rms;

   typedef uint8_t _y_rms_type;
  _y_rms_type y_rms;

   typedef uint8_t _invalid_state_type;
  _invalid_state_type invalid_state;

   typedef uint8_t _pdh0_type;
  _pdh0_type pdh0;

   typedef uint8_t _vx_rms_type;
  _vx_rms_type vx_rms;

   typedef uint8_t _vy_rms_type;
  _vy_rms_type vy_rms;





  typedef boost::shared_ptr< ::nuscenes2bag::RadarObject_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::nuscenes2bag::RadarObject_<ContainerAllocator> const> ConstPtr;

}; // struct RadarObject_

typedef ::nuscenes2bag::RadarObject_<std::allocator<void> > RadarObject;

typedef boost::shared_ptr< ::nuscenes2bag::RadarObject > RadarObjectPtr;
typedef boost::shared_ptr< ::nuscenes2bag::RadarObject const> RadarObjectConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::nuscenes2bag::RadarObject_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::nuscenes2bag::RadarObject_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::nuscenes2bag::RadarObject_<ContainerAllocator1> & lhs, const ::nuscenes2bag::RadarObject_<ContainerAllocator2> & rhs)
{
  return lhs.pose == rhs.pose &&
    lhs.dyn_prop == rhs.dyn_prop &&
    lhs.id == rhs.id &&
    lhs.rcs == rhs.rcs &&
    lhs.vx == rhs.vx &&
    lhs.vy == rhs.vy &&
    lhs.vx_comp == rhs.vx_comp &&
    lhs.vy_comp == rhs.vy_comp &&
    lhs.is_quality_valid == rhs.is_quality_valid &&
    lhs.ambig_state == rhs.ambig_state &&
    lhs.x_rms == rhs.x_rms &&
    lhs.y_rms == rhs.y_rms &&
    lhs.invalid_state == rhs.invalid_state &&
    lhs.pdh0 == rhs.pdh0 &&
    lhs.vx_rms == rhs.vx_rms &&
    lhs.vy_rms == rhs.vy_rms;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::nuscenes2bag::RadarObject_<ContainerAllocator1> & lhs, const ::nuscenes2bag::RadarObject_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace nuscenes2bag

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::nuscenes2bag::RadarObject_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::nuscenes2bag::RadarObject_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nuscenes2bag::RadarObject_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nuscenes2bag::RadarObject_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nuscenes2bag::RadarObject_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nuscenes2bag::RadarObject_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::nuscenes2bag::RadarObject_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2dca0314b6fc449f331ba195c716ed10";
  }

  static const char* value(const ::nuscenes2bag::RadarObject_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2dca0314b6fc449fULL;
  static const uint64_t static_value2 = 0x331ba195c716ed10ULL;
};

template<class ContainerAllocator>
struct DataType< ::nuscenes2bag::RadarObject_<ContainerAllocator> >
{
  static const char* value()
  {
    return "nuscenes2bag/RadarObject";
  }

  static const char* value(const ::nuscenes2bag::RadarObject_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::nuscenes2bag::RadarObject_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Vector3 pose\n"
"uint8 dyn_prop\n"
"uint16 id\n"
"float32 rcs\n"
"float32 vx\n"
"float32 vy\n"
"float32 vx_comp\n"
"float32 vy_comp\n"
"uint8 is_quality_valid\n"
"uint8 ambig_state\n"
"uint8 x_rms\n"
"uint8 y_rms\n"
"uint8 invalid_state\n"
"uint8 pdh0\n"
"uint8 vx_rms\n"
"uint8 vy_rms\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::nuscenes2bag::RadarObject_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::nuscenes2bag::RadarObject_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pose);
      stream.next(m.dyn_prop);
      stream.next(m.id);
      stream.next(m.rcs);
      stream.next(m.vx);
      stream.next(m.vy);
      stream.next(m.vx_comp);
      stream.next(m.vy_comp);
      stream.next(m.is_quality_valid);
      stream.next(m.ambig_state);
      stream.next(m.x_rms);
      stream.next(m.y_rms);
      stream.next(m.invalid_state);
      stream.next(m.pdh0);
      stream.next(m.vx_rms);
      stream.next(m.vy_rms);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RadarObject_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::nuscenes2bag::RadarObject_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::nuscenes2bag::RadarObject_<ContainerAllocator>& v)
  {
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "dyn_prop: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.dyn_prop);
    s << indent << "id: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.id);
    s << indent << "rcs: ";
    Printer<float>::stream(s, indent + "  ", v.rcs);
    s << indent << "vx: ";
    Printer<float>::stream(s, indent + "  ", v.vx);
    s << indent << "vy: ";
    Printer<float>::stream(s, indent + "  ", v.vy);
    s << indent << "vx_comp: ";
    Printer<float>::stream(s, indent + "  ", v.vx_comp);
    s << indent << "vy_comp: ";
    Printer<float>::stream(s, indent + "  ", v.vy_comp);
    s << indent << "is_quality_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_quality_valid);
    s << indent << "ambig_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ambig_state);
    s << indent << "x_rms: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.x_rms);
    s << indent << "y_rms: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.y_rms);
    s << indent << "invalid_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.invalid_state);
    s << indent << "pdh0: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.pdh0);
    s << indent << "vx_rms: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.vx_rms);
    s << indent << "vy_rms: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.vy_rms);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NUSCENES2BAG_MESSAGE_RADAROBJECT_H
