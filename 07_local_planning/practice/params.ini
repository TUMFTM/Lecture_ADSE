[PARAMS]

# -- XY_WAYPOINTS ------------------------------------------------------------------------------------------------------
# positions of waypoints for reference path
#
# x:                    x-positions of waypoints                            [m]
# y:                    y-positions of waypoints                            [m]
xy_waypoints = {"x": [0, 100, 205, 350],
                "y": [0, -6, 5, 0]}

# -- SD_OBSTACLES ------------------------------------------------------------------------------------------------------
# positions of obstacles
#
# s:                    s-positions of obstacles relative to reference path [m]
# d:                    d-positions of obstacles relative to reference path [m]
sd_obstacles = {"s": [70, 94.5, 170],
                "d": [2, 0, -3]}

# -- INITIAL_STATE -----------------------------------------------------------------------------------------------------
# initial state of the car
#
# x:                    x-position of the center of the car                 [m]
#                       needs to be in proximity of the reference path
# y:                    y-position of the center of the car                 [m]
#                       needs to be in proximity of the reference path
# theta:                heading angle of the car                            [rad]
#                       keep between -pi/2 and pi/2
# kappa:                curvature of the position of the car                [1/m]
#                       keep within limits defined below
# v:                    velocity of the car                                 [m/s]
#                       keep within limits defined below
# a:                    longitudinal acceleration of the car                [m/s2]
#                       keep within limits defined below
initial_state = {"x": 5.0,
                 "y": -3.0,
                 "theta": 0,
                 "kappa": 0,
                 "v": 5.0,
                 "a": 1.0}

# -- DISCRETIZATION ----------------------------------------------------------------------------------------------------
# parameters for local trajectory planner
#
# t_min:                minimum prediction time horizon                     [s]
# t_max:                maximum prediction time horizon                     [s]
# num_t:                number of equidistant time samples between          [-]
#                       t_min and t_max
# s_dot_min:            minimum sampled velocity along reference path       [m/s]
# s_dot_max:            maximum sampled velocity along reference path       [m/s]
# num_s_dot:            number of equidistant velocity samples between      [-]
#                       s_dot_min and s_dot_max
# s_dot_desired:        desired longitudinal velocity along reference path  [m/s]
# d_min:                maximum sampled lateral offset towards the right    [m]
#                       of the car (has to be negative)
# d_max:                maximum sampled lateral offset towards the left     [m]
#                       of the car
# num_d:                number of equidistant lateral offset samples        [-]
#                       between d_right and d_left
# sampling_points:      number of points along generated trajectories       [-]
# car_length:           length of the car                                   [m]
# car_width:            width of the car                                    [m]
# min_safety_factor:    minimum safety factor                               [-]
# max_safety_factor:    maximum_safety_factor                               [-]
# safety_factor_time:   time at which max_safety_factor is reached          [s]
# fixed_calc_time:      time step size                                      [s]
discretization = {"t_min": 4,
                  "t_max": 5,
                  "num_t": 2,
                  "s_dot_min": 7,
                  "s_dot_max": 13,
                  "num_s_dot": 3,
                  "s_dot_desired": 10,
                  "d_min": -7,
                  "d_max": 7,
                  "num_d": 11,
                  "sampling_points": 50,
                  "car_length": 5,
                  "car_width": 2,
                  "min_safety_factor": 1,
                  "max_safety_factor": 2,
                  "safety_factor_time": 1,
                  "fixed_calc_time": 0.1}

# -- LIMITS ------------------------------------------------------------------------------------------------------------
# limits of car
#
# v_max:                maximum velocity                                    [m/s]
# a_max:                maximum longitudinal acceleration                   [m/s2]
# kappa_max:            maximum curvature                                   [1/m]
limits = {"v_max": 15,
          "a_max": 5,
          "kappa_max": 1}

# -- COST_COEFFICIENTS -------------------------------------------------------------------------------------------------
# coefficients for cost calculation
#
# k_jerk:               coefficient for lateral and longitudinal jerk       [-]
# k_time:               coefficient for end time                            [-]
# k_d:                  coefficient for lateral deviation from reference    [-]
#                       path
# k_s_dot:              coefficient for deviation of the longitudinal end   [-]
#                       velocity from s_dot_desired
# k_lateral:            coefficient for lateral cost                        [-]
# k_longitudinal:       coefficient for longitudinal cost                   [-]
cost_coefficients = {"k_jerk": 1.0,
                     "k_time": 1.0,
                     "k_d": 1.0,
                     "k_s_dot": 1.0,
                     "k_lateral": 1.0,
                     "k_longitudinal": 1.0}

# EOF
